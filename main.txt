using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using His_Pos.Class;
using His_Pos.tabClass;
using MenuUserControl;
using KeyEventArgs = System.Windows.Input.KeyEventArgs;
using MenuItem = System.Windows.Controls.MenuItem;
using MouseEventArgs = System.Windows.Input.MouseEventArgs;

namespace His_Pos
{
    /// <summary>
    /// MainWindow.xaml 的互動邏輯
    /// </summary>
    public partial class MainWindow
    {
        private LoginAuth _myAuth;
        public static User CurrentUser = new User();

        public MainWindow(User userLogin)
        {
            InitializeComponent();

            CurrentUser = userLogin;

            InitializePaymentBlock();
            PosIcon.Source = new BitmapImage(new Uri("/Icons/P.png", UriKind.Relative));
            DataContext = this;
            _tabs = new ObservableCollection<ITab>();
            _tabs.CollectionChanged += TabsCollectionChanged;
            TabCollection = _tabs;
            if (_hisHided)
                InitializeHis_PosMenu();
            else
                InitializeHisMenu();
            SlideMenuTimer = new Timer();
            SetTimerInterval(SlideMenuTimer,1);
            SlideMenuTimer.Tick += SlideMenuTimer_tick;
        }
        private void InitializeHis_PosMenu() {
            _menuWidth = HisPosMenu.Width;
            _hisPosFeaturesItemsList = new List<string[]> { _hisPosFeatures1Item, _hisPosFeatures2Item, _hisPosFeatures3Item, _hisPosFeatures4Item };
            _hisPosFeaturesList = new List<UserControl1> { HisPosFeature1, HisPosFeature2, HisPosFeature3, HisPosFeature4};
            for (int i = 0; i < 4; i++) {
                _hisPosFeaturesList[i].setLabelText(_hisPosFeatures[i]);
                _hisPosFeaturesList[i].setLabelImage(_hisPosFeaturesIcon[i]);
                SetFeaturesItem(_hisPosFeaturesList[i], _hisPosFeaturesItemsList[i]);
            }
            UpdateLayout();
        }
        private void SetFeaturesItem(UserControl1 features, string [] itemsName)
        {
            if (features == null || itemsName == null)
                throw new ArgumentNullException(nameof(itemsName));
        
            foreach (var t in itemsName)
            {
                var newItem = new MenuItem();
                features.newMenuItem(t,newItem, Items_MouseDown);
            }
        }
        private void InitializeHisMenu() => _menuWidth = HisMenu.Width;
        private void SetTimerInterval(Timer t, int interval) => t.Interval = interval;
        private void InitializePaymentBlock() {
            PaymentTimer = new Timer();
            SetTimerInterval(PaymentTimer, 1);
            PaymentTimer.Tick += PaymentTimer_tick;
            _paymentWidth = Payment.Width;
            InputMethod.SetIsInputMethodEnabled(Barcode, false);
        }
        private void Button_Click(object sender, RoutedEventArgs e){
            PaymentTimer.Start();
        }
        private void SlideMenuTimer_tick(object sender, EventArgs e){
            if (_hisHided)
            {
                if (_slideHided)
                {
                    HisPosMenu.Width = HisPosMenu.Width + 5;
                    if (HisPosMenu.Width >= _menuWidth)
                    {
                        SlideMenuTimer.Stop();
                        _slideHided = false;
                    }
                    UpdateLayout();
                }
                else
                {
                    HisPosMenu.Width = HisPosMenu.Width - 5;
                    if (HisPosMenu.Width <= 50)
                    {
                        SlideMenuTimer.Stop();
                        _slideHided = true;
                    }
                    UpdateLayout();
                }
            }
            else {
                if (_slideHided)
                {
                    HisMenu.Width = HisMenu.Width + 5;
                    if (HisMenu.Width >= _menuWidth)
                    {
                        SlideMenuTimer.Stop();
                        _slideHided = false;
                    }
                    UpdateLayout();
                }
                else
                {
                    HisMenu.Width = HisMenu.Width - 5;
                    if (HisMenu.Width <= 50)
                    {
                        SlideMenuTimer.Stop();
                        _slideHided = true;
                    }
                    UpdateLayout();
                }
            }
        }
        private void PaymentTimer_tick(object sender, EventArgs e)
        {
            if (e == null) throw new ArgumentNullException(nameof(e));
            if (_paymentHided)
            {
                if (Payment.Width >= _paymentWidth * 0.6) {
                    _widthChange = _widthChange - 0.32;
                    Payment.Width = Payment.Width + _widthChange;
                }
                else
                    Payment.Width = Payment.Width + 10;
                if (Payment.Width >= _paymentWidth)
                {
                    PaymentTimer.Stop();
                    _paymentHided = false;
                }
                UpdateLayout();
            }
            else
            {
                if (Payment.Width >= _paymentWidth * 0.6)
                {
                    _widthChange = _widthChange + 0.32;
                    Payment.Width = Payment.Width - _widthChange;
                    DockBorder.Width = DockBorder.Width + _widthChange;
                }
                else {
                    Payment.Width = Payment.Width - 10;
                    DockBorder.Width = DockBorder.Width + 10;
                }

                if (Payment.Width <= 29)
                {
                    PaymentTimer.Stop();
                    _paymentHided = true;
                }
                UpdateLayout();
            }
        }
        private void Image_MouseDown(object sender, MouseButtonEventArgs e)
        {
            SlideMenuTimer.Start();
        }

        private void Menu_MouseEnter(object sender, MouseEventArgs e)
        {
            if (!_slideHided) return;
            SlideMenuTimer.Start();
        }
        private void HisPosFeature_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (!(sender is UserControl1 uc)) throw new ArgumentNullException(nameof(uc));
            uc.ListMenuTimer?.Start();
        }

        private void Image_MouseEnterLeave(object sender, MouseEventArgs e)
        {
            var iconImage = sender as Image;
            Debug.Assert(iconImage != null, nameof(iconImage) + " != null");
            iconImage.Source = e.RoutedEvent.Name == "MouseEnter" ? new BitmapImage(new Uri("/Icons/closeHover.png", UriKind.Relative)) 
                : new BitmapImage(new Uri("/Icons/close.png", UriKind.Relative));
        }
        private void Items_MouseDown(object sender, RoutedEventArgs e)
        {
            if (_slideHided) return;
            if (sender is MenuItem m) NewTab(m.Name);
        }

        private void NewTab( string name)
        {
            int index = 0;
            foreach (ITab tab in TabCollection)
            {
                if (tab.Name == name)
                {
                    FunctionsTabControl.SelectedIndex = index;
                    return;
                }
                index++;
            }

            var newIcon = new Image();
            //TabCollection.Add(new NewTab(newIcon, name));
            TabCollection.Add(new PrescriptionDec.PrescriptionDec(name));

            FunctionsTabControl.SelectedIndex = TabCollection.Count - 1;
        }

        private void TabsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            ITab newTab;

            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    newTab = (ITab)e.NewItems[0];
                    newTab.CloseReqested += OnTabCloseRequested;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    newTab = (ITab)e.OldItems[0];
                    newTab.CloseReqested -= OnTabCloseRequested;
                    break;
            }
        }

        private void OnTabCloseRequested(object sender, EventArgs e)
        {
            TabCollection.Remove((ITab)sender);
        }

        private void Payment_MouseDown(object sender, MouseButtonEventArgs e)
        {
            Barcode.Focus();
        }

        private void barcode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                var products = new Products();
                /*var pro = products.GetProduct(Barcode.Text);

                for (var x = 0; x < BarcodeDataGrid.Items.Count; x++)
                {
                    if (((Product)BarcodeDataGrid.Items[x]).ProductName == pro.ProductName)
                    {
                        ((Product)BarcodeDataGrid.Items[x]).ProductPrice *= 2;
                        BarcodeDataGrid.Items.Refresh();
                        Barcode.Text = string.Empty;
                        return;
                    }
                }
                BarcodeDataGrid.Items.Add(pro);
                Barcode.Text = string.Empty;*/
            }
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            /*List<SqlParameter> listparam = new List<SqlParameter>();
            SqlParameter account = new SqlParameter("@ACCOUNT","1");
            SqlParameter password = new SqlParameter("@PASSWORD", "1111");
            listparam.Add(account);
            listparam.Add(password);
            DbConnection dd = new DbConnection(Properties.Settings.Default.SQL_local);
            DataRow[] rows = dd.ExecuteProc(listparam, "[POSHIS_Test].[DBO].[CHECKLOGIN]").Select("IsPass = 1");
            int loginAuth;
            LoginAuth value;
            foreach (DataRow row in rows) {
                loginAuth = Convert.ToInt32(row["POS Authority"]);
                value = (LoginAuth)loginAuth;
            }*/
            //LoginAuth vv = new LoginAuth();
            //bool dd = CheckAccount("1","1111",ref vv);
            //int ggg;
        }
    }
}
